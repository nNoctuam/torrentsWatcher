stages:
  - test
  - build
  - deploy

variables:
  REGISTRY_PATH: "fileshare.local:5000/${CI_PROJECT_PATH_SLUG}"

#gofmt:
#  stage: test
#  image: golang:1.16
#  tags:
#    - docker-exec
#  before_script: [] # prevent run `docker login`
#  script:
#    - test -z "$(gofmt -s -l -e -d $(find . -name '*.go' -type f -print | grep -v vendor | tr '\n' ' ') | tee /dev/stderr)"

lint:
  stage: test
  image: golangci/golangci-lint:v1.42.0
  tags:
    - docker-exec
  artifacts:
    paths:
      - lint_succeeded
  cache:
    paths:
      - /var/golangci-lint-cache
  before_script: [] # prevent run docker login
  variables:
    GOFLAGS: -mod=vendor
    GOLANGCI_LINT_CACHE: /var/golangci-lint-cache
  script:
    - mkdir cmd/torrentsWatcher/dist && touch cmd/torrentsWatcher/dist/dummy.txt
    - golangci-lint run -v
    - touch lint_succeeded

test:
  stage: test
  tags:
    - docker-exec
  artifacts:
    paths:
      - test_succeeded
  image: golang:1.17
  before_script: [] # prevent run docker login
  variables:
    GOFLAGS: -mod=vendor
  script:
    - mkdir cmd/torrentsWatcher/dist && touch cmd/torrentsWatcher/dist/dummy.txt
    - go test ./... -v -coverprofile coverage.out
    - go tool cover -func=coverage.out
    - touch test_succeeded
  only:
    - branches
  except:
    - tags

# TODO jest unit tests

build:
  stage: build
  needs:
    - lint
    - test
  artifacts:
    paths:
      - build_succeeded
  image: docker
  script:
    - if [ ! -f lint_succeeded ]; then exit 1; fi
    - if [ ! -f test_succeeded ]; then exit 1; fi
    - docker build --cache-from ${CI_PROJECT_PATH_SLUG}:latest -t ${CI_PROJECT_PATH_SLUG}:latest .
#    - docker tag ${CI_PROJECT_PATH_SLUG}:latest ${REGISTRY_PATH}:latest
#    - docker push ${REGISTRY_PATH}:latest
    - touch build_succeeded
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always

deploy:
  stage: deploy
  needs:
    - build
  image: docker
  script:
    - if [ ! -f build_succeeded ]; then exit 1; fi
    - docker stop ${CI_PROJECT_PATH_SLUG} && docker rm ${CI_PROJECT_PATH_SLUG} || true
    - >
      docker run -d --name ${CI_PROJECT_PATH_SLUG}
      --volume /var/${CI_PROJECT_PATH_SLUG}/torrents.db:/torrents.db
      --volume /var/${CI_PROJECT_PATH_SLUG}/config.yml:/config.yml
      --volume ${DOWNLOADS_DIR}:/downloads
      -p ${PORT}:8803
      --restart=always
      ${CI_PROJECT_PATH_SLUG}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always